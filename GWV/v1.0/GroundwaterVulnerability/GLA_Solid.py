from PyQt4.QtCore import *
from PyQt4.QtGui import *
from qgis.core import *
from qgis.gui import *
import os, sys, time, csv, itertools

from ui_Files.ui_Lith_s import Ui_SolidDialog

class LithSolid(QDialog, Ui_SolidDialog):

	def __init__(self, gla):
		# setup UI and connect the buttons
		QDialog.__init__(self)
		
		self.setupUi(self)
		
		# get reference of GLA main file
		self.gla = gla
		
		# connect buttons
		self.connect(self.btn_save, SIGNAL("clicked()"), self.save)
		self.connect(self.btn_load, SIGNAL("clicked()"), self.load)		
		self.connect(self.btn_apply, SIGNAL("clicked()"), self.apply)
#		self.connect(self.btn_reset, SIGNAL("clicked()"), self.reset)
		self.connect(self.btn_add, SIGNAL("clicked()"), self.add)
		self.connect(self.btn_clearall, SIGNAL("clicked()"), self.clearAll)
		self.connect(self.btn_clearlith, SIGNAL("clicked()"), self.clearAsso)
		self.connect(self.btn_rem, SIGNAL("clicked()"), self.remove)
#		QObject.connect(self.buttonBox, SIGNAL("accepted()"),self, SLOT("reject()"))
		self.connect(self.btn_accept, SIGNAL("clicked()"), self.accept)
		
		self.btn_rem.setEnabled(False)
		self.btn_apply.setEnabled(False)	
		
		# define table click behavior
		self.tbl_LithS.cellClicked.connect(self.clicked)
		self.tbl_Type_look.cellClicked.connect(self.clicked) 
		self.tbl_Type_look.cellDoubleClicked.connect(self.apply)
		self.tbl_Struc_look.cellClicked.connect(self.clicked) 
		self.tbl_Struc_look.cellDoubleClicked.connect(self.apply)
		
		# define table selection behavior
		self.tbl_LithS.setSelectionBehavior(QAbstractItemView.SelectRows)
		self.tbl_Type_look.setSelectionBehavior(QAbstractItemView.SelectRows)
		self.tbl_Struc_look.setSelectionBehavior(QAbstractItemView.SelectRows)
		
		# add icons
		self.btn_add.setIcon(QIcon(":/plugins/GroundwaterVulnerability/icons/add.png"))
		self.btn_rem.setIcon(QIcon(":/plugins/GroundwaterVulnerability/icons/remove.png"))
		self.btn_save.setIcon(QIcon(":/plugins/GroundwaterVulnerability/icons/save.png"))
		self.btn_load.setIcon(QIcon(":/plugins/GroundwaterVulnerability/icons/load.png"))
		
		# create some empty lists
		self.layer_list = []
		self.asso_list = []	
		self.LITHType_s = []
		self.LITHStruc_s = []
		self.lith_L_sel = []
		self.lookup_sel = []
		self.asso_list_s = []
		self.LITH_s_files = []
		
		# read lithology lookup csv table
		LITHcsv_type = csv.DictReader(open(self.gla.LITHTab_type, "rb"), delimiter=';')
		LITHcsv_struc = csv.DictReader(open(self.gla.LITHTab_struc, "rb"), delimiter=';')
		
		# map over lithology csv
		# extract columns
		for line in LITHcsv_type:
			self.LITHType_s.append(line["Type"])
			
		for line in LITHcsv_struc:
			self.LITHStruc_s.append(line["Structure"])
		
		# store column values in lists
		self.LITHType_s = [str(i) for i in self.LITHType_s]
		self.LITHStruc_s = [str(i) for i in self.LITHStruc_s]
		
		# display lookup table
		self.insertLOOKUP()
	
	def accept(self):
		self.check()
		self.hide()

		
		missing_row = []
		missing_lith = []		
		self.asso_list_s = []
		
		allRows = self.tbl_LithS.rowCount()
		
		try:
			for row in xrange(0, allRows):
				if not os.path.exists(self.LITH_s_files[row]):
					missing_lith.append(row + 1)			
			
				if self.tbl_LithS.item(row, 1).text() == "":
					missing_row.append(row + 1)
					
		except AttributeError:	
#			print "hier"
#			QMessageBox.information(None,"Info","You forgot to associate the lithology in line {0}.".format([miss for miss in missing_row]).replace('[','').replace(']',''))
			return
			
		if missing_row:	
			QMessageBox.information(None,"Info","You forgot to associate the lithology in line {0}.".format([miss for miss in missing_row]).replace('[','').replace(']',''))

		elif missing_lith:
			QMessageBox.information(None,"Info","The layer does not exist in line {0}.".format([miss for miss in missing_lith]).replace('[','').replace(']',''))			
			
		else:
			try:
				for row in xrange(0, allRows):
					self.asso_list_s.append(self.tbl_LithS.item(row, 1).text())
					
					self.hide()
					
			except AttributeError, e:
				print e
				QMessageBox.information(None,"Info","You forgot to associate the lithology in line {0}.".format([miss for miss in missing_row]).replace('[','').replace(']',''))
				
			
#			print self.asso_list_s
			
#		QMessageBox.information(None,"Info","You forgot to associate the lithology in line {0}.".format(miss for miss in missing_row))
		
			
		
#		return self.LITH_s_files, self.asso_list_s
#		self.close()

	def save(self):
		self.check()
		
		self.saveList = []
		
		saveName = QFileDialog.getSaveFileName(self, "Consolidated Lithology Configuration Save",".", "TXT (*.txt)")
		
		while saveName:
		
			saveList = list(self.LITH_s_files)
			
			for i in range(0, len(self.LITH_s_files)):
				saveList[i] = self.LITH_s_files[i] + ";" + self.asso_list_s[i]
			
			#with open(self.saveName, "wb") as fp:
				#a = csv.writer(fp)
				#for entry in saveList:
					#print entry
					#a.writerows(entry)
					
					
			
			
			#self.saveList = [self.LITH_l_files, self.short_list_l, self.asso_list_l]
			
			
			#with open(self.saveName, "wb") as fp:
				#a = csv.writer(fp)
				#for entry in self.saveList:
					#a.writerows(entry)
			
			
			
			f = open(saveName, "w")
			for item in saveList:
				f.write(item + "\n")
				f.close
					
			#csvWriter = csv.writer(myCSVFile, dialect='excel', quoting=csv.QUOTE_NONNUMERIC)
			#csvWriter.writerow(headings)
			#for data in myListData:
				#csvWriter.writerow(data)

		
	def load(self):
		
		loadName = QFileDialog.getOpenFileName(self, "Consolidated Lithology Configuration Load", self.gla.currentDIR, "TXT (*.txt)")
		
		if loadName:
			self.clearAll()
			
			files_list_load = []
			short_list_load = []
			asso_list_load = []
			
			f = open(loadName)
			lines = f.read().splitlines()
			for line in lines:
				try:
					filepath, association = line.split(";")
				except ValueError, e:
					QMessageBox.information(None,"Error","Wrong lithology input.")
					return
				except:
					return
				files_list_load.append(filepath)
				asso_list_load.append(association)

			for file in files_list_load:
				path, filename = os.path.split(file)
				name = os.path.splitext(filename)[0]
				extension = os.path.splitext(filename)[1]
				if extension == ".tif" or extension == ".grd":
					layer_s = str(name + extension)
					self.layer_list.append(layer_s)	
					self.LITH_s_files.append(file)

				
				

			# display layers from directory
			self.insertLayer()

			for i, asso_item in enumerate(asso_list_load):
				a_input = QTableWidgetItem(asso_item)
				self.tbl_LithS.setItem(i, 1, a_input)
			
			f.close()
				
		elif not loadName:
			pass
			
	def check(self):

		missing_asso = []
		missing_lith = []
		self.asso_list_s = []
		
		allRows = self.tbl_LithS.rowCount()
		
		# check if cell is empty
		# create list of missing files
		try:
			for row in xrange(0, allRows):
				if not os.path.exists(self.LITH_s_files[row]):
					missing_lith.append(row + 1)
			
				if self.tbl_LithS.item(row, 1).text() == "":
					missing_asso.append(row + 1)
					
		except AttributeError:		
#			QMessageBox.information(None,"Info","You forgot to associate the lithology in line {0}.".format([miss for miss in missing_asso]).replace('[','').replace(']',''))
			return
			
		if missing_asso:		
			QMessageBox.information(None,"Info","You forgot to associate the lithology in line {0}.".format([miss for miss in missing_asso]).replace('[','').replace(']',''))

		elif missing_lith:
			QMessageBox.information(None,"Info","The layer does not exist in line {0}.".format([miss for miss in missing_lith]).replace('[','').replace(']',''))
			
		else:
			try:
			# if cell not empty, build list with lithology associations
				for row in xrange(0, allRows):
					self.asso_list_s.append(self.tbl_LithS.item(row, 1).text())
			
			# build list with association indices
			# check if lithology has high organic content
						
			except AttributeError, e:
				print e
				QMessageBox.information(None,"Info","You forgot to associate the lithology in line {0}.".format([miss for miss in missing_row]).replace('[','').replace(']',''))						
		
	def insertLOOKUP(self):
		# set number of rows
		self.tbl_Type_look.setRowCount(len(self.LITHType_s))
		self.tbl_Struc_look.setRowCount(len(self.LITHStruc_s))
		
		# insert into table
		for i, row in enumerate(self.LITHType_s):
			t_input = QTableWidgetItem(row)
			self.tbl_Type_look.setItem(i, 0, t_input)

		for j, row in enumerate(self.LITHStruc_s):
			s_input = QTableWidgetItem(row)
			self.tbl_Struc_look.setItem(j, 0, s_input)
			
		self.tbl_Type_look.setSelectionBehavior(QAbstractItemView.SelectRows)	
		self.tbl_Struc_look.setSelectionBehavior(QAbstractItemView.SelectRows)	
		
	def insertLayer(self):
		# set number of rows
		self.tbl_LithS.setRowCount(len(self.layer_list))
		
		# insert layer into table
		for i, row in enumerate(self.layer_list):
			s_input = QTableWidgetItem(row)
			self.tbl_LithS.setItem(i, 0, s_input)
			
		if len(self.asso_list) == 0:
			for j in xrange(0, len(self.layer_list)):
				self.asso_list.append("")

		elif len(self.asso_list) != 0:
			if len(self.asso_list) != len(self.layer_list):
				diff = len(self.layer_list) - len(self.asso_list)
				for j in xrange(0, diff):
					self.asso_list.append("")
		
		self.tbl_LithS.setSelectionBehavior(QAbstractItemView.SelectRows)
		self.btn_apply.setEnabled(True)
		
#		self.layer_list = []
#		self.LITH_s_files = []
	
	def apply(self):
		# insert lookup table
		try:		
			for element in self.sel_S_list:
				a_input = QTableWidgetItem(self.look_item)
				self.tbl_LithS.setItem(element, 1, a_input)
				self.asso_list[element] = self.look_item
				
		except TypeError, e:
			return			
		except AttributeError, e:
			QMessageBox.information(None,"Info","Type or structure missing")
			return
					
		sel_S = None
		sel_look_t = None
		sel_look_s = None
		self.sel_S_list = None
		self.sel_type_list = []
		self.sel_struc_list = []
		
#	def reset(self):
#		pass
	
	def add(self):
		try:
			add_LITH_s = QFileDialog.getOpenFileNames(self, "Lithology input file", self.leLITH_sText, "Images (*.tif *.grd)")
			
		except AttributeError:
			add_LITH_s = QFileDialog.getOpenFileNames(self, "Lithology input file", self.gla.currentDIR, "Images (*.tif *.grd)")	
		
		for files in add_LITH_s:
			path, filename = os.path.split(files)
			layer_s = str(os.path.splitext(filename)[0])
			self.layer_list.append(layer_s)
			self.LITH_s_files.append(str(files))
		
		# display layers from directory
		self.insertLayer()

		# create lithology association list
		# must have the same length as layer list		
#		self.asso_list_s = list(self.layer_list)
		
	def remove(self):
		self.btn_rem.setEnabled(False)
		
		for i in self.sel_S_list:
			self.LITH_s_files.pop(i)
			self.layer_list.pop(i)
			self.asso_list.pop(i)
		
			self.tbl_LithS.removeRow(i)
		
	def clearAll(self):
		self.tbl_LithS.setRowCount(0)
		self.layer_list = []
		self.asso_list = []
		
	def clearAsso(self):
		# insert empty lookup table
		for j in xrange(0, len(self.layer_list)):
			a_input = QTableWidgetItem("")
			self.tbl_LithS.setItem(j, 1, a_input)
		
	def clicked(self, currentRow):
		self.btn_rem.setEnabled(True)
		sel_S = None
		sel_look_t = None
		sel_look_s = None
		
		# write list with indices of all selected rows
		sel_S = self.tbl_LithS.selectionModel().selectedRows()
		sel_look_t = self.tbl_Type_look.selectionModel().selectedRows()
		sel_look_s = self.tbl_Struc_look.selectionModel().selectedRows()
		
		# new empty list
		# loop over lines and add to rowlist
		self.sel_S_list = []
		self.sel_type_list = []
		self.sel_struc_list = []
		
		# write row numbers to list
		# sel_S_list is the list of selected lithology layers
		for i in sel_S:
			self.sel_S_list.append(i.row())	
		
		# write row numbers to list
		# sel_type_list is the list of selected lookup rock types
		# sel_struc_list is the list of selected lookup rock structures
		for j in sel_look_t:
			self.sel_type_list.append(j.row())
			
		for k in sel_look_s:
			self.sel_struc_list.append(k.row())
			
		# parallely loop through lookup	lists
		# get selected text from lookup tables
		# store both texts in one variable
		for a, b in itertools.izip(self.sel_type_list, self.sel_struc_list):
			self.look_item = self.tbl_Type_look.item(a,0).text() + ", " + self.tbl_Struc_look.item(b,0).text()

		sel_S = None
		sel_look_t = None
		sel_look_s = None			