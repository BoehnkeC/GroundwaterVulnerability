# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GroundwaterVulnerability
                                 A QGIS plugin
 calculates
                              -------------------
        begin                : 2014-08-30
        copyright            : (C) 2014 by Christian Boehnke
        email                : christian@home-boehnke.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# Import the PyQt and QGIS libraries
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from qgis.core import *
from qgis.gui import *
# Initialize Qt resources from file resources.py
import resources_rc, os.path
# Import the code for the dialog
#from groundwater_vulnerability_dialog import GroundwaterVulnerabilityDialog
from GLA_Main import GLAMethod

class GroundwaterVulnerability:

	def __init__(self, iface):
		# Save reference to the QGIS interface
		self.iface = iface	

		#initialize plugin directory
		self.plugin_dir = os.path.dirname(__file__)			
		

	def initGui(self):
		# Create action that will start plugin configuration
		self.actionGLA = QAction(QIcon(":/plugins/GroundwaterVulnerability/icons/GLA.png"), u"GLA", self.iface.mainWindow())
		
		# connect the action to the run method
		QObject.connect(self.actionGLA, SIGNAL("triggered()"), self.runGLA)

		# Add toolbar button and menu item
		self.iface.addToolBarIcon(self.actionGLA)
		self.iface.addPluginToMenu(u"&GLA Method", self.actionGLA)

		# Add Plugin to toolbar
#		self.toolBar = self.iface.addToolBar("GLA")
#		self.toolBar.addAction(self.actionGLA)		
	
	def unload(self):
		# unload plugin
		# Remove the buttons
		self.iface.removeToolBarIcon(self.actionGLA)
		self.iface.removePluginMenu(u"&GLA Method", self.actionGLA)
		
		# remove tool bar
#		del self.toolBar
			
		self.plugin_dir = None

	# run method that performs all the real work

	def runGLA(self):
	# create and show a configuration dialog or something similar
		dlg = GLAMethod(self.iface)
		dlg.show()
		dlg.exec_()



