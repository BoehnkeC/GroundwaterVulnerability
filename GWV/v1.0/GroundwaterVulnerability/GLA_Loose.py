from PyQt4.QtCore import *
from PyQt4.QtGui import *
from qgis.core import *
from qgis.gui import *
import os, sys, time, csv

from ui_Files.ui_Lith_l import Ui_LooseDialog

class LithLoose(QDialog, Ui_LooseDialog):

	def __init__(self, gla):
		# setup UI and connect the buttons
		QDialog.__init__(self)
		
		self.setupUi(self)
		
		# get reference of GLA main file
		self.gla = gla
		
		# connect buttons
		self.connect(self.btn_save, SIGNAL("clicked()"), self.save)
		self.connect(self.btn_load, SIGNAL("clicked()"), self.load)
		self.connect(self.btn_apply, SIGNAL("clicked()"), self.apply)
#		self.connect(self.btn_reset, SIGNAL("clicked()"), self.reset)
		self.connect(self.btn_add, SIGNAL("clicked()"), self.add)
		self.connect(self.btn_clearall, SIGNAL("clicked()"), self.clearAll)
		self.connect(self.btn_clearlith, SIGNAL("clicked()"), self.clearAsso)
		self.connect(self.btn_rem, SIGNAL("clicked()"), self.remove)
#		QObject.connect(self.buttonBox, SIGNAL("accepted()"),self, SLOT("reject()"))
		self.connect(self.btn_accept, SIGNAL("clicked()"), self.accept)
		
		self.btn_rem.setEnabled(False)
		self.btn_apply.setEnabled(False)	
		
		# define table click behavior
		self.tbl_LithL.cellClicked.connect(self.clicked)
		self.tbl_LithL_look.cellClicked.connect(self.clicked) 
		self.tbl_LithL_look.cellDoubleClicked.connect(self.apply)
		
		# define table selection behavior
#		self.tbl_LithL.setSelectionBehavior(QAbstractItemView.SelectRows)
#		self.tbl_LithL_look.setSelectionBehavior(QAbstractItemView.SelectRows)
		
		# add icons
		self.btn_add.setIcon(QIcon(":/plugins/GroundwaterVulnerability/icons/add.png"))
		self.btn_rem.setIcon(QIcon(":/plugins/GroundwaterVulnerability/icons/remove.png"))
		self.btn_save.setIcon(QIcon(":/plugins/GroundwaterVulnerability/icons/save.png"))
		self.btn_load.setIcon(QIcon(":/plugins/GroundwaterVulnerability/icons/load.png"))
		
		self.tbl_LithL.setColumnWidth(1, 150)
		self.tbl_LithL.setColumnWidth(2, 50)
		self.tbl_LithL.horizontalHeader().setResizeMode(0, QHeaderView.Stretch)
		
		# create some empty lists
		self.layer_list = []
		self.asso_list = []
		self.LITHName_l = []
		self.LITHShort_l = []
		self.LITHScore_l = []
		self.lith_L_sel = []
		self.lookup_sel = []
		self.asso_list_l = []
		self.LITH_l_files = []
		
		# read lithology lookup csv table
		LITHcsv_l = csv.DictReader(open(self.gla.LITHTab_l, "rb"), delimiter=";")
		
		# map over lithology csv
		# extract columns
		for line in LITHcsv_l:
			self.LITHName_l.append(line["Name"])
			self.LITHShort_l.append(line["Short"])
			self.LITHScore_l.append(line["Points"])
		
		# store column values in lists
		self.LITHName_l = [str(i) for i in self.LITHName_l]
		self.LITHShort_l = [str(i) for i in self.LITHShort_l]
		self.LITHScore_l = [str(i) for i in self.LITHScore_l]
		
		# display lookup table
		self.insertLOOKUP()
		
	def accept(self):
		self.check()
		self.hide()
	
	def save(self):
		self.check()
		
		self.saveList = []
		
		saveName = QFileDialog.getSaveFileName(self, "Unconsolidated Lithology Configuration Save",".", "TXT (*.txt)")
		
		while saveName:
		
			saveList = list(self.LITH_l_files)
			
			for i in range(0, len(self.LITH_l_files)):
				saveList[i] = self.LITH_l_files[i] + ";" + self.short_list_l[i] + ";" + self.asso_list_l[i]
			
			#with open(self.saveName, "wb") as fp:
				#a = csv.writer(fp)
				#for entry in saveList:
					#print entry
					#a.writerows(entry)
					
					
			
			
			#self.saveList = [self.LITH_l_files, self.short_list_l, self.asso_list_l]
			
			
			#with open(self.saveName, "wb") as fp:
				#a = csv.writer(fp)
				#for entry in self.saveList:
					#a.writerows(entry)
			
			
			
			f = open(saveName, "w")
			for item in saveList:
				f.write(item + "\n")
				f.close
					
			#csvWriter = csv.writer(myCSVFile, dialect='excel', quoting=csv.QUOTE_NONNUMERIC)
			#csvWriter.writerow(headings)
			#for data in myListData:
				#csvWriter.writerow(data)

		
	def load(self):
		
		loadName = QFileDialog.getOpenFileName(self, "Unconsolidated Lithology Configuration Load", self.gla.currentDIR, "TXT (*.txt)")

		if loadName:
			self.clearAll()
		
			files_list_load = []
			short_list_load = []
			asso_list_load = []
			
			f = open(loadName)
			lines = f.read().splitlines()
			for line in lines:
				try:
					filepath, shortcut, association = line.split(";")
				except ValueError, e:
					QMessageBox.information(None,"Error","Wrong lithology input.")
					return
				except:
					return			
			
				files_list_load.append(filepath)
				short_list_load.append(shortcut)
				asso_list_load.append(association)

			for file in files_list_load:
				path, filename = os.path.split(file)
				name = os.path.splitext(filename)[0]
				extension = os.path.splitext(filename)[1]
				if extension == ".tif" or extension == ".grd":
					layer_l = str(name + extension)
					self.layer_list.append(layer_l)	
					self.LITH_l_files.append(file)

				
				

			# display layers from directory
			self.insertLayer()

			for i, asso_item in enumerate(asso_list_load):
				a_input = QTableWidgetItem(asso_item)
				self.tbl_LithL.setItem(i, 1, a_input)

			for j, short_item in enumerate(short_list_load):
				short, org = short_item.split(": ")
				o_input = QTableWidgetItem(org)
				self.tbl_LithL.setItem(j, 2, o_input)
				
			f.close()
			
		elif not loadName:
			pass
			
					
					
	
	def check(self):
		missing_asso = []
		missing_lith = []
		self.asso_list_l = []
		self.short_list_l = []
		
		allRows = self.tbl_LithL.rowCount()
		
		# check if cell is empty
		# create list of missing files
		try:
			for row in xrange(0, allRows):
				if not os.path.exists(self.LITH_l_files[row]):
					missing_lith.append(row + 1)
			
				if self.tbl_LithL.item(row, 1).text() == "":
					missing_asso.append(row + 1)
					
		except AttributeError:		
#			QMessageBox.information(None,"Info","You forgot to associate the lithology in line {0}.".format([miss for miss in missing_asso]).replace('[','').replace(']',''))
			return
			
		if missing_asso:		
			QMessageBox.information(None,"Info","You forgot to associate the lithology in line {0}.".format([miss for miss in missing_asso]).replace('[','').replace(']',''))

		elif missing_lith:
			QMessageBox.information(None,"Info","The layer does not exist in line {0}.".format([miss for miss in missing_lith]).replace('[','').replace(']',''))
			
		else:
			try:
			# if cell not empty, build list with lithology associations
				for row in xrange(0, allRows):
					self.asso_list_l.append(self.tbl_LithL.item(row, 1).text())
			
			# build list with association indices
			# check if lithology has high organic content
				self.short_list_l = list(self.asso_list_l)
					
				for index, entry in enumerate(self.asso_list_l):
					if entry in self.LITHName_l and self.tbl_LithL.item(index, 2).text() == "No":
						self.short_list_l[index] = self.LITHShort_l[self.LITHName_l.index(entry)] + ": No"
						
					elif entry in self.LITHName_l and self.tbl_LithL.item(index, 2).text() == "Yes":
						self.short_list_l[index] = self.LITHShort_l[self.LITHName_l.index(entry)] + ": Yes"
						
#				self.hide()
						
			except AttributeError, e:
				print e
				QMessageBox.information(None,"Info","You forgot to associate the lithology in line {0}.".format([miss for miss in missing_row]).replace('[','').replace(']',''))	
		
	def insertLOOKUP(self):
		# set number of rows
		self.tbl_LithL_look.setRowCount(len(self.LITHName_l))
		
		# insert into table
		for i, row in enumerate(self.LITHName_l):
			l_input = QTableWidgetItem(row)
			self.tbl_LithL_look.setItem(i, 0, l_input)

		for j, row in enumerate(self.LITHShort_l):
			d_input = QTableWidgetItem(row)
			self.tbl_LithL_look.setItem(j, 1, d_input)
			
		self.tbl_LithL_look.setSelectionBehavior(QAbstractItemView.SelectRows)	
		
	def insertLayer(self):
		# set number of rows
		self.tbl_LithL.setRowCount(len(self.layer_list))
		
		# insert layer into table
		for i, row in enumerate(self.layer_list):
			l_input = QTableWidgetItem(row)
			no_input = QTableWidgetItem("")
			o_input = QTableWidgetItem("No")
			self.tbl_LithL.setItem(i, 0, l_input)
			self.tbl_LithL.setItem(i, 1, no_input)
			self.tbl_LithL.setItem(i, 2, o_input)
			
		if len(self.asso_list) == 0:
			for j in xrange(0, len(self.layer_list)):
				self.asso_list.append("")
#				print "New Asso: ", len(self.asso_list)
#				self.short_list_l.append("")
				
		elif len(self.asso_list) != 0:
			if len(self.asso_list) != len(self.layer_list):
				diff = len(self.layer_list) - len(self.asso_list)
				for j in xrange(0, diff):
					self.asso_list.append("")
		
		self.tbl_LithL.setSelectionBehavior(QAbstractItemView.SelectRows)
		self.btn_apply.setEnabled(True)
		
#		self.layer_list = []
#		self.LITH_l_files = []
	
	def apply(self):
		# insert lookup element	
		try:
			for element in self.sel_L_list:
				a_input = QTableWidgetItem(self.look_item)
				self.tbl_LithL.setItem(element, 1, a_input)
#				print "Asso: ", len(self.asso_list)
#				print "Element: ", element
				self.asso_list[element] = self.look_item
	#			self.short_list_l[element] = self.look_short
	
		except TypeError, e:
			return
			
		except AttributeError, e:
			QMessageBox.information(None,"Info","Association missing")
			return

		sel_L = None
		sel_look = None
		self.sel_L_list = None
		self.sel_look_list = None
		
#	def reset(self):
#		pass
	
	def add(self):
		try:
			add_LITH_l = QFileDialog.getOpenFileNames(self, "Lithology input file", self.leLITH_lText, "Images (*.tif *.grd)")
			
		except AttributeError:
			add_LITH_l = QFileDialog.getOpenFileNames(self, "Lithology input file", self.gla.currentDIR, "Images (*.tif *.grd)")
		
		for files in add_LITH_l:
			path, filename = os.path.split(files)
			layer_l = str(os.path.splitext(filename)[0])
			self.layer_list.append(layer_l)
			self.LITH_l_files.append(str(files))
			

		
		# display layers from directory
		self.insertLayer()

		# create lithology association list
		# must have the same length as layer list		
#		self.asso_list_l = list(self.layer_list)
		
	def remove(self):
		self.btn_rem.setEnabled(False)
		
		for i in self.sel_L_list:
			self.LITH_l_files.pop(i)
			self.layer_list.pop(i)
			self.asso_list.pop(i)
#			self.short_list_l.pop(i)
		
			self.tbl_LithL.removeRow(i)
		
#		self.insertLayer()
#		self.apply()
		
	def clearAll(self):
		self.tbl_LithL.setRowCount(0)
		self.layer_list = []
		self.asso_list = []
#		self.short_list_l = []
		
	def clearAsso(self):
		# insert empty lookup table
		for j in xrange(0, len(self.layer_list)):
			a_input = QTableWidgetItem("")
			self.tbl_LithL.setItem(j, 1, a_input)
	
	def clicked(self, currentRow):
		self.btn_rem.setEnabled(True)
		sel_L = None
		sel_look = None
		
		# write list with coded indices of all selected rows
		sel_L = self.tbl_LithL.selectionModel().selectedRows()
		sel_look = self.tbl_LithL_look.selectionModel().selectedRows()
		
		# new empty list
		# loop over lines and add to rowlist
		self.sel_L_list = []
		self.sel_look_list = []
		
		# write encoded row numbers to list
		# sel_L_list is the list of selected lithology layers
		for i in sel_L:
			self.sel_L_list.append(i.row())	
		
		# write encoded row numbers to list
		# sel_look_list is the list of selected lookup lithologies
		for j in sel_look:
			self.sel_look_list.append(j.row())
		
		# get selected text from lookup table
		for k in self.sel_look_list:
			self.look_item = self.tbl_LithL_look.item(k,0).text()
#			self.look_short = self.tbl_LithL_look.item(k,1).text()

		sel_L = None
		sel_look = None
#		self.sel_L_list = None
		self.sel_look_list = None